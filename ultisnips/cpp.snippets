###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet wjsm "文件声明"
/************************************************************************
* @Author  : YaoShiHong 
* @Company : candela
* @Date    : `!v strftime("%Y-%m-%d %H:%M")`
* @file    : $1
*********************************************************************/
endsnippet

snippet hssm "函数声明"
/******************************************************
****** Function	   			: $1   
****** brief				: $2	
****** param				: $3
****** return				: $4
*******************************************************/
endsnippet

snippet debug "输出当前行和函数"
printf("\033[1;33m[debug]\033[0m :func:\"%s\" line:[%d]\n",__FUNCTION__,__LINE__);
endsnippet

snippet comment "分割线"
/**************************************************  $1  **************************************************/
endsnippet

snippet allcomment "全部分割线"
/**************************************************  包含头文件  **************************************************/

/**************************************************  宏定义 **************************************************/

/**************************************************  结构体定义 **************************************************/

/**************************************************  枚举定义 **************************************************/

/**************************************************  变量声明 **************************************************/

/**************************************************  函数声明 **************************************************/

/**************************************************  类 **************************************************/

endsnippet

snippet font_lblack "字体亮黑"
\033[1;30m
endsnippet

snippet font_dblack "字体深黑"
\033[0;30m
endsnippet

snippet font_lred "字体亮红"
\033[1;31m
endsnippet

snippet font_dblack "字体深红"
\033[0;31m
endsnippet

snippet font_lgreen "字体亮绿"
\033[1;32m
endsnippet

snippet font_dgreen "字体深绿"
\033[0;32m
endsnippet

snippet font_lyellow "字体亮黄"
\033[1;33m
endsnippet

snippet font_dyellow "字体深黄"
\033[0;33m
endsnippet

snippet font_lblue "字体亮蓝"
\033[1;34m
endsnippet

snippet font_dblue "字体深蓝"
\033[0;34m
endsnippet

snippet font_lpurple "字体亮紫"
\033[1;35m
endsnippet

snippet font_dpurple "字体深紫"
\033[0;35m
endsnippet

snippet font_lcyan "字体亮蓝绿"
\033[1;36m
endsnippet

snippet font_dcyan "字体深蓝绿"
\033[0;36m
endsnippet

snippet font_lwhite "字体亮白"
\033[1;37m
endsnippet

snippet font_dwhite "字体深白"
\033[0;37m
endsnippet

snippet nocolor "颜色终止"
\033[0m
endsnippet





snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

# vim:ft=snippets:
